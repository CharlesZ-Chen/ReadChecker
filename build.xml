<project name="ReadChecker" basedir="." default="build-checker">

    <loadproperties srcFile="build.properties"/>

    <!-- build properties -->
    <property name="checker.bin" value="${basedir}/bin"/>
    <property name="checker.src" value="${basedir}/src"/>
    <property name="build.deps" value="${basedir}/build-deps"/>
    <property name="javac.lib" value="${build.deps}/javac.jar"/>
    <property name="framework.lib" value="${build.deps}/framework.jar"/>
    <!-- <property name="annotation-file-utilities.lib" value="${build.deps}/annotation-file-utilities.jar"/> -->
    <!-- if using jdk.astub, un-comment below properties, and re-configure the right place of your jdk.astub-->
    <property name="jdk.astub" value="${checker.src}/read/jdk.astub"/>
    <property name="jdk.astub.bin.dir" value="${checker.bin}/read"/>

    <!-- test properties -->
    <property name="tests" value="${basedir}/tests" />
    <property name="tests.src" value="${tests}/src" />
    <property name="tests.deps" value="${tests}/deps" />
    <property name="tests.build" value="${tests}/build"/>
    <property name="build.reports" value="${tests.build}/reports"/>
    <!-- <property name="javac.lib" value="${tests.deps}/javac.jar"/> -->
    <!-- Defaults, used if the Ant invocation does not set a value. -->
    <property name="halt.on.test.error" value="true" />
    <property name="halt.on.test.failure" value="true" />

    <!-- build targets start -->
    <target name="prep-checker" description="create needs dirs, and prepare the dependences of this checker">
        <mkdir dir="${checker.bin}"/>
        <mkdir dir="${build.deps}"/>

        <symlink link="${build.deps}/framework.jar" resource="${checker-framework}/framework/dist/framework.jar" overwrite="true"/>
        <symlink link="${build.deps}/javac.jar" resource="${jsr308-langtools}/dist/lib/javac.jar" overwrite="true"/>
        <!-- <symlink link="${build.deps}/annotation-file-utilities.jar" resource="${annotation-file-utilities}/annotation-file-utilities.jar" overwrite="true"/> -->

        <!-- using jdk.astub specific, need to re-configure the right place of yoru jdk.astub.bin.dir-->
        <copy file="${jdk.astub}" todir="${jdk.astub.bin.dir}"/>
    </target>

    <target name="build-checker" depends="prep-checker"
        description="link all necessary dependences into ${build.deps} and compile this checker.">
        <pathconvert pathsep=":" property="build.classpath">
        <path>
            <fileset dir="${build.deps}">
                <include name="*.jar"/>
            </fileset>
        </path>
        </pathconvert>

        <pathconvert pathsep=" " property="src.checker">
        <path>
            <fileset dir="${checker.src}">
                <include name="**/*.java"/>
            </fileset>
        </path>
        </pathconvert>

        <java fork="true"
              failonerror="true"
              classpath="${build.classpath}"
              classname="com.sun.tools.javac.Main">
            <jvmarg line="-Xbootclasspath/p:${javac.lib}"/>
            <arg value="-g"/>
            <arg value="-source"/>
            <arg value="7"/>
            <arg value="-target"/>
            <arg value="7"/>
            <!-- To not get a warning about bootstrap classpath -->
            <arg value="-Xlint:-options"/>
            <arg line="-sourcepath ${checker.src}"/>
            <arg line="-d ${checker.bin}"/>
            <arg line="${src.checker}"/>
        </java>
    </target>

    <target name="clean">
        <delete dir="${checker.bin}" quiet="true"/>
        <delete dir="${build.deps}" quiet="true"/>
    </target>
    <!-- build targets end -->

    <!-- test target start -->
    <target name="prep-tests" description="create needs dirs, and prepare the dependences of running tests">
        <mkdir dir="${tests.build}"/>
        <mkdir dir="${build.reports}"/>
        <mkdir dir="${tests.deps}"/>
        <symlink link="${tests.deps}/framework.jar" resource="${checker-framework}/framework/dist/framework.jar" overwrite="true"/>
        <symlink link="${tests.deps}/javac.jar" resource="${jsr308-langtools}/dist/lib/javac.jar" overwrite="true"/>
        <symlink link="${tests.deps}/hamcrest-core.jar" resource="${checker-framework}/framework/tests/hamcrest-core-1.3.jar" overwrite="true"/>
        <symlink link="${tests.deps}/junit.jar" resource="${checker-framework}/framework/tests/junit-4.12.jar" overwrite="true"/>

        <pathconvert pathsep=" " property="src.tests">
            <path>
                <fileset dir="${tests.src}">
                    <include name="**/*.java"/>
                </fileset>
            </path>
        </pathconvert>

        <pathconvert pathsep=":" property="test.classpath">
            <path>
                <fileset dir="${tests.deps}">
                    <include name="*.jar"/>
                </fileset>
            </path>
        </pathconvert>
    </target>

    <target name="build-tests" depends="prep-tests" description="Compile tests">
        <java fork="true"
              failonerror="true"
              classpath="${test.classpath}:${basedir}/bin"
              classname="com.sun.tools.javac.Main">
            <jvmarg line="-Xbootclasspath/p:${javac.lib}"/>
            <arg value="-g"/>
            <!-- Make sure we only have Java 7 source code and generate Java 7 bytecode. -->
            <arg value="-source"/>
            <arg value="7"/>
            <arg value="-target"/>
            <arg value="7"/>
            <!-- To not get a warning about bootstrap classpath -->
            <arg value="-Xlint:-options"/>
            <arg line="-sourcepath ${tests.src}"/>
            <arg line="-d ${tests.build}"/>
            <arg line="${src.tests}"/>
        </java>
    </target>

    <target name="run-tests" depends="build-tests"
            description="Run tests for this checker, WITHOUT building anything">

        <!-- set this on the command line for like -Dtest.filter="**/TargetedTest.java" to target specific tests-->
        <property name="test.filter" value="**/*Test.java"/>

        <condition property="should.emit.debug.str" value="true" else="false">
            <isset property="emit.test.debug"/>
        </condition>

        <condition property="debugger.str" value="-Xnoagent -Djava.compiler=NONE -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005" else="">
            <isset property="debugger.on"/>
        </condition>

        <!-- Copied from -run-tests target -->
        <mkdir dir="${build.reports}"/>

        <junit fork="true"
               dir="${basedir}"
               printsummary="false"
               haltonerror="${halt.on.test.error}"
               haltonfailure="${halt.on.test.failure}">
            <!--Set JAVAC_JAR so the insert-annotations-to-source can use it-->
            <!-- <env key="JAVAC_JAR" value="${javac.lib}"/> -->
            <classpath path="${test.classpath}:${tests.build}:${basedir}/bin"/>
            <jvmarg line="-Xbootclasspath/p:${javac.lib}"/>
            <jvmarg line="-ea"/>
            <!-- <jvmarg line="${debugger.str}"/> -->
            <sysproperty key="use.hacks" value="${use.hacks.str}"/>
            <sysproperty key="emit.test.debug" value="${should.emit.debug.str}"/>

            <formatter type="xml"/>
            <formatter type="brief" usefile="false"/>

            <!-- <test name="ReadTest"/> -->
            <batchtest todir="${build.reports}">
                <fileset dir="${tests.src}">
                    <include name="${test.filter}"/>
                </fileset>
            </batchtest>
        </junit>
    </target>
    <!-- test target end -->

</project>
